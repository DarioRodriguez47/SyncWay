name: Build and Push Docker Images

on:
  push:
    branches: [main, develop]
    paths:
      - "MicroserviceVersion/services/**"
      - ".github/workflows/**" # Para que se ejecute si cambias el workflow
  pull_request:
    branches: [main]
    paths: ["MicroserviceVersion/services/**"]
  workflow_dispatch: # Permite ejecuci√≥n manual

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: estevanb

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - List files
        run: |
          echo "=== Verificando estructura de archivos ==="
          ls -la
          echo "=== Contenido de MicroserviceVersion ==="
          ls -la MicroserviceVersion/ || echo "MicroserviceVersion no existe"
          echo "=== Contenido de services ==="
          ls -la MicroserviceVersion/services/ || echo "services no existe"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if Music Service Dockerfile exists
        id: check-music
        run: |
          if [ -f "MicroserviceVersion/services/musics/Dockerfile" ]; then
            echo "music_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Music Service Dockerfile encontrado"
          else
            echo "music_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Music Service Dockerfile NO encontrado"
          fi

      - name: Build and push Music Service
        if: steps.check-music.outputs.music_exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./MicroserviceVersion
          file: ./MicroserviceVersion/services/musics/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/musics-service:latest
            ${{ env.DOCKERHUB_USERNAME }}/musics-service:${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Users Service
        if: hashFiles('MicroserviceVersion/services/users/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: ./MicroserviceVersion
          file: ./MicroserviceVersion/services/users/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/users-service:latest
            ${{ env.DOCKERHUB_USERNAME }}/users-service:${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Chat Service
        if: hashFiles('MicroserviceVersion/services/chat/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: ./MicroserviceVersion
          file: ./MicroserviceVersion/services/chat/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/chat-service:latest
            ${{ env.DOCKERHUB_USERNAME }}/chat-service:${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "‚úÖ Docker images built and pushed successfully!"
          echo "üê≥ Available images:"
          echo "   - ${{ env.DOCKERHUB_USERNAME }}/musics-service:${{ github.run_number }}"
          echo "   - ${{ env.DOCKERHUB_USERNAME }}/musics-service:latest"
