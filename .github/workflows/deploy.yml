name: Deploy to Azure VM

on:
  push:
    branches: [main, develop]
  workflow_dispatch: # Permite ejecutar manualmente

env:
  PROJECT_PATH: /home/${{ secrets.AZURE_VM_USER }}/SyncWave
  COMPOSE_PATH: /home/${{ secrets.AZURE_VM_USER }}/SyncWave/MicroserviceVersion

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Preparar estructura de directorios en la VM
      - name: Preparar estructura de directorios
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            # Crear directorios si no existen
            mkdir -p ${{ env.PROJECT_PATH }}/services/users
            mkdir -p ${{ env.PROJECT_PATH }}/services/musics
            mkdir -p ${{ env.PROJECT_PATH }}/MicroserviceVersion

            # Verificar que Docker esté corriendo
            if ! docker info > /dev/null 2>&1; then
              echo "Error: Docker no está corriendo"
              exit 1
            fi

      # Clonar o actualizar el repositorio
      - name: Actualizar código en la VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            cd /home/${{ secrets.AZURE_VM_USER }}

            # Si el directorio no existe o no es un repo git, clonarlo de nuevo
            if [ ! -d "SyncWave/.git" ]; then
              rm -rf SyncWave
              git clone https://github.com/${{ github.repository }}.git SyncWave
            else
              cd SyncWave
              git fetch origin
              git reset --hard origin/main
              git pull origin main
            fi

      # Crear archivos .env en la VM
      - name: Configurar variables de entorno
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            # Crear directorios si no existen
            mkdir -p ${{ env.PROJECT_PATH }}/services/users
            mkdir -p ${{ env.PROJECT_PATH }}/services/musics

            # Crear .env para users service
            cat > ${{ env.PROJECT_PATH }}/services/users/.env << 'EOF'
            ${{ secrets.USERS_ENV }}
            EOF

            # Crear .env para music service
            cat > ${{ env.PROJECT_PATH }}/services/musics/.env << 'EOF'
            ${{ secrets.MUSICS_ENV }}
            EOF

            # Verificar que los archivos se crearon
            echo "Archivos .env creados:"
            ls -la ${{ env.PROJECT_PATH }}/services/users/.env
            ls -la ${{ env.PROJECT_PATH }}/services/musics/.env
      # Desplegar aplicación
      - name: Deploy aplicación con Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            cd ${{ env.COMPOSE_PATH }}

            # Verificar que docker-compose.yml existe
            if [ ! -f "docker-compose.yml" ]; then
              echo "Error: docker-compose.yml no encontrado en ${{ env.COMPOSE_PATH }}"
              exit 1
            fi

            # Parar servicios existentes
            docker-compose down || true

            # Limpiar imágenes antiguas (opcional)
            docker system prune -f || true

            # Construir y levantar servicios
            docker-compose up -d --build --remove-orphans

            # Verificar que los servicios están corriendo
            echo "Estado de los servicios:"
            docker-compose ps

            # Verificar logs si hay errores
            docker-compose logs --tail=50

      # Verificar despliegue
      - name: Verificar servicios desplegados
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            cd ${{ env.COMPOSE_PATH }}

            echo "=== Estado final de los contenedores ==="
            docker-compose ps

            echo "=== Verificando health checks ==="
            sleep 30 # Esperar a que los servicios se inicien

            # Verificar usuarios service
            if curl -f http://localhost:5000/health 2>/dev/null; then
              echo "✅ Users service: OK"
            else
              echo "❌ Users service: FAIL"
            fi

            # Verificar music service  
            if curl -f http://localhost:5001/health 2>/dev/null; then
              echo "✅ Music service: OK"
            else
              echo "❌ Music service: FAIL"
            fi

            # Verificar frontend
            if curl -f http://localhost:4200 2>/dev/null; then
              echo "✅ Frontend: OK"
            else
              echo "❌ Frontend: FAIL"
            fi

            # Verificar nginx
            if curl -f http://localhost:8090/lb-health 2>/dev/null; then
              echo "✅ Nginx: OK"
            else
              echo "❌ Nginx: FAIL"
            fi
