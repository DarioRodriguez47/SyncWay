services:
  # Servicio de Usuarios
  users-service:
    image: estevanb/users-service:latest
    container_name: syncwave-users-service
    env_file:
      - ./services/users/.env
    environment:
      - NODE_ENV=production
      - PORT=5000
    ports:
      - "5000:5000"
    networks:
      - syncwave-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Servicio de Música
  music-service:
    image: estevanb/musics-service:latest
    container_name: syncwave-music-service
    env_file:
      - ./services/musics/.env
    environment:
      - NODE_ENV=production
      - PORT=5001
    ports:
      - "5001:5000"
    networks:
      - syncwave-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped


  # Frontend Angular
  frontend:
    build:
      context: ./fronted
      dockerfile: Dockerfile
    container_name: syncwave-frontend
    environment:
      - NODE_ENV=production
    ports:
      - "4200:4200"
    networks:
      - syncwave-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4200/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Prometheus para monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: syncwave-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - syncwave-network
    restart: unless-stopped

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: syncwave-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - syncwave-network
    restart: unless-stopped
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: syncwave-nginx
    ports:
      - "8090:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
    # ✅ Solo depende del frontend
    depends_on:
      - frontend
    networks:
      - syncwave-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/lb-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

networks:
  syncwave-network:
    driver: bridge
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local