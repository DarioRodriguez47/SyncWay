# Pipeline para construir y desplegar microservicios a Docker Hub
trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - services/*

pool:
  vmImage: "ubuntu-latest"

variables:
  # Service connection name (debes crear esto en Azure DevOps)
  dockerHubServiceConnection: "WebMicroservice"
  # Tu usuario de Docker Hub
  dockerHubUsername: "estevanb" # Cambia esto
  # Build context
  buildContext: "."

stages:
  - stage: Build
    displayName: "Build and Push Images"
    jobs:
      - job: BuildMicroservices
        displayName: "Build All Microservices"
        steps:
          # Checkout del c√≥digo
          - checkout: self
            displayName: "Checkout source code"

          # Build y push del Microservicio de M√∫sica
          - task: Docker@2
            displayName: "Build and Push Music Service"
            inputs:
              containerRegistry: $(dockerHubServiceConnection)
              repository: "$(dockerHubUsername)/musics-service"
              command: "buildAndPush"
              Dockerfile: "services/musics/Dockerfile"
              buildContext: $(buildContext)
              tags: |
                $(Build.BuildId)
                latest

          # Build y push del Microservicio de Usuarios (cuando lo tengas)
          - task: Docker@2
            displayName: "Build and Push Users Service"
            condition: and(succeeded(), exists('services/users/Dockerfile'))
            inputs:
              containerRegistry: $(dockerHubServiceConnection)
              repository: "$(dockerHubUsername)/users-service"
              command: "buildAndPush"
              Dockerfile: "services/users/Dockerfile"
              buildContext: $(buildContext)
              tags: |
                $(Build.BuildId)
                latest

          # Build y push del Microservicio de Chat (cuando lo tengas)
          - task: Docker@2
            displayName: "Build and Push Chat Service"
            condition: and(succeeded(), exists('services/chat/Dockerfile'))
            inputs:
              containerRegistry: $(dockerHubServiceConnection)
              repository: "$(dockerHubUsername)/chat-service"
              command: "buildAndPush"
              Dockerfile: "services/chat/Dockerfile"
              buildContext: $(buildContext)
              tags: |
                $(Build.BuildId)
                latest

          # Ejecutar tests (opcional)
          - script: |
              echo "Ejecutando tests de los microservicios..."
              # Aqu√≠ puedes agregar comandos para ejecutar tests
            displayName: "Run Tests"
            condition: succeeded()

          # Notificaci√≥n de √©xito
          - script: |
              echo "‚úÖ Todas las im√°genes han sido construidas y subidas exitosamente"
              echo "üê≥ Im√°genes disponibles en Docker Hub:"
              echo "   - $(dockerHubUsername)/musics-service:$(Build.BuildId)"
              echo "   - $(dockerHubUsername)/musics-service:latest"
            displayName: "Success Notification"
            condition: succeeded()
